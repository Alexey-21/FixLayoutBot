import telebot
from collections import namedtuple
from telebot import types
import sqlite3
from datetime import datetime
bot = telebot.TeleBot("8468360526:AAFbp5OfBIsw4nU6YNdmZVLnD1TcHcrcTEw", parse_mode='HTML')
strelka = u"\U000027A1"
opat_tonkosti = 0
ispr_str = ''
user_states = {}


def init_db():
    conn = sqlite3.connect('bot_stats.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY, 
                first_seen TEXT,
                last_seen TEXT)''')
    conn.commit()
    conn.close()

init_db()


def update_stats(user_id):
    conn = sqlite3.connect('bot_stats.db')
    c = conn.cursor()
    now = datetime.now().isoformat()

    c.execute("SELECT 1 FROM users WHERE user_id=?", (user_id,))
    exists = c.fetchone()

    if exists:
        c.execute("UPDATE users SET last_seen=? WHERE user_id=?", (now, user_id))
    else:
        c.execute("INSERT INTO users (user_id, first_seen, last_seen) VALUES (?, ?, ?)",
                  (user_id, now, now))
    conn.commit()
    conn.close()


def get_stats():
    conn = sqlite3.connect('bot_stats.db')
    c = conn.cursor()

    c.execute("SELECT COUNT(*) FROM users")
    total_users = c.fetchone()[0]

    today = datetime.now().date().isoformat()
    c.execute("SELECT COUNT(*) FROM users WHERE DATE(last_seen) = ?", (today,))
    daily_users = c.fetchone()[0]

    conn.close()
    return total_users, daily_users


Pair = namedtuple('Pair', ['first', 'second'])
pair_1 = Pair('q', '–π')
pair_2 = Pair('w', '—Ü')
pair_3 = Pair('e', '—É')
pair_4 = Pair('r', '–∫')
pair_5 = Pair('t', '–µ')
pair_6 = Pair('y', '–Ω')
pair_7 = Pair('u', '–≥')
pair_8 = Pair('i', '—à')
pair_9 = Pair('o', '—â')
pair_10 = Pair('p', '–∑')
pair_11 = Pair('[', '—Ö')
pair_12 = Pair(']', '—ä')
pair_13 = Pair('a', '—Ñ')
pair_14 = Pair('s', '—ã')
pair_15 = Pair('d', '–≤')
pair_16 = Pair('f', '–∞')
pair_17 = Pair('g', '–ø')
pair_18 = Pair('h', '—Ä')
pair_19 = Pair('j', '–æ')
pair_20 = Pair('k', '–ª')
pair_21 = Pair('l', '–¥')
pair_22 = Pair(';', '–∂')
pair_23 = Pair('', '—ç')
pair_24 = Pair('z', '—è')
pair_25 = Pair('x', '—á')
pair_26 = Pair('c', '—Å')
pair_27 = Pair('v', '–º')
pair_28 = Pair('b', '–∏')
pair_29 = Pair('n', '—Ç')
pair_30 = Pair('m', '—å')
pair_31 = Pair(',', '–±')
pair_32 = Pair('.', '—é')
pair_33 = Pair('/', '.')
pair_34 = Pair('`', '—ë')
pair_35 = Pair('|', '/')
pair_36 = Pair('~', '–Å')
pair_37 = Pair('Q', '–ô')
pair_38 = Pair('W', '–¶')
pair_39 = Pair('E', '–£')
pair_40 = Pair('R', '–ö')
pair_41 = Pair('T', '–ï')
pair_42 = Pair('Y', '–ù')
pair_43 = Pair('U', '–ì')
pair_44 = Pair('I', '–®')
pair_45 = Pair('O', '–©')
pair_46 = Pair('P', '–ó')
pair_47 = Pair('{', '–•')
pair_48 = Pair('}', '–™')
pair_49 = Pair('A', '–§')
pair_50 = Pair('S', '–´')
pair_51 = Pair('D', '–í')
pair_52 = Pair('F', '–ê')
pair_53 = Pair('G', '–ü')
pair_54 = Pair('H', '–†')
pair_55 = Pair('J', '–û')
pair_56 = Pair('K', '–õ')
pair_57 = Pair('L', '–î')
pair_58 = Pair(':', '–ñ')
pair_59 = Pair('"', '–≠')
pair_60 = Pair('Z', '–Ø')
pair_61 = Pair('X', '–ß')
pair_62 = Pair('C', '–°')
pair_63 = Pair('V', '–ú')
pair_64 = Pair('B', '–ò')
pair_65 = Pair('N', '–¢')
pair_66 = Pair('M', '–¨')
pair_67 = Pair('<', '–ë')
pair_68 = Pair('>', '–Æ')
pair_69 = Pair('?', ',')
pair_70 = Pair(' ', ' ')

pair_raskladok = [pair_1, pair_2, pair_3, pair_4, pair_5, pair_6, pair_7, pair_8, pair_9, pair_10, pair_11, pair_12, pair_13, pair_14, pair_15, pair_16, pair_17, pair_18, pair_19, pair_20, pair_21, pair_22, pair_23, pair_24, pair_25, pair_26 ,pair_27, pair_28, pair_29, pair_30, pair_31, pair_32, pair_33, pair_34, pair_35, pair_36, pair_37, pair_38, pair_39, pair_40, pair_41, pair_42, pair_43, pair_44, pair_45, pair_46, pair_47, pair_48, pair_49, pair_50, pair_51, pair_52, pair_53, pair_54, pair_55, pair_56, pair_57, pair_58, pair_59, pair_60, pair_61, pair_62, pair_63, pair_64, pair_65, pair_66, pair_67, pair_68, pair_69, pair_70]

def start_markup():
    markup = types.InlineKeyboardMarkup()
    btn_1 = types.InlineKeyboardButton(text = f'–†—É—Å {strelka} –ê–Ω–≥–ª', callback_data='start_ru_angl')
    btn_2 = types.InlineKeyboardButton(text = f'–ê–Ω–≥–ª {strelka} –†—É—Å', callback_data='start_angl_ru')
    markup.add(btn_1, btn_2)
    return markup

@bot.message_handler(commands=['start'])
def start_message(message):
    user_id = message.from_user.id
    update_stats(user_id)
    bot.send_message(message.chat.id, '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n–¢–µ–±—è –≤–µ–¥—å —Ç–æ–∂–µ —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç, –∫–æ–≥–¥–∞ –∑–∞–±—ã–≤–∞–µ—à—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥–∫—É –∏ –ø–∏—à–µ—à—å "ghbdtn" –≤–º–µ—Å—Ç–æ "–ø—Ä–∏–≤–µ—Ç"?\n\n–¢–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–º—É –±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Ç. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞–ø–∏—à–∏ /fix.')

@bot.message_handler(commands=['fix'])
def fix_message(message):
    user_id = message.from_user.id
    update_stats(user_id)
    bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏ —Å –∫–∞–∫–æ–π —Ä–∞—Å–∫–∞–ª–¥–∫–∏ –Ω–∞ –∫–∞–∫—É—é –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç.',reply_markup=start_markup())

@bot.message_handler(commands=['stats'])
def send_stats(message):
    total, daily = get_stats()
    bot.reply_to(message,
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n"
        f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è –∞–∫—Ç–∏–≤–Ω—ã—Ö: {daily}"
    )

@bot.callback_query_handler(func= lambda call:call.data.startswith)
def check_click_message(call):
        if call.data == 'start_ru_angl':
            global tumb
            tumb = 'start_ru_angl'
            bot.send_message(call.message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.')
        if call.data == 'start_angl_ru':
            tumb = 'start_angl_ru'
            bot.send_message(call.message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.')
@bot.message_handler(content_types=['text'])
def check_click_one(message):
    user_id = message.from_user.id
    update_stats(user_id)
    global ispr_str
    global eror_1
    eror_1 = 'no'
    global eror_2
    eror_2 = 'no'
    if tumb == 'start_ru_angl':
        global fix_rask
        fix_rask = str(message.text)
        n = len(fix_rask)
        symbol_num = ''
        i = 0
        for i in range(0, n, 1):
            if fix_rask[i] == ' ':
                ispr_str += ' '
            else:
                for j in range(0, 69, 1):
                    pair_now = pair_raskladok[j]
                    if pair_now.second == fix_rask[i]:
                        symbol_num = j
                if symbol_num == None:
                    bot.send_message(message.chat.id, '–¢—ã –≤—ã–±—Ä–∞–ª –ø–µ—Ä–µ–≤–æ–¥ —Å —Ä—É—Å—Å–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫—É—é, –∞ –Ω–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –∞ –Ω–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.\n\n–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫—É—é, —Ç–æ –Ω–∞–ø–∏—à–∏ /fix –∏ –≤—ã–±–µ—Ä–∏ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç')
                    eror_1 = 'yes'
                    break
                else:
                    pair_after = pair_raskladok[symbol_num]
                    ispr_str += pair_after.first
    elif tumb == 'start_angl_ru':
        fix_rask = str(message.text)
        m = len(fix_rask)
        symbol_num_2 = ''
        i = 0
        for i in range(0, m, 1):
            if fix_rask[i] == ' ':
                ispr_str += ' '
            else:
                for j in range(0, 69, 1):
                    pair_now = pair_raskladok[j]
                    if pair_now.first == fix_rask[i]:
                        symbol_num_2 = j
                if symbol_num_2 == '':
                    bot.send_message(message.chat.id, '–¢—ã –≤—ã–±—Ä–∞–ª –ø–µ—Ä–µ–≤–æ–¥ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫—É—é, –∞ –Ω–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∞ –Ω–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.\n\n–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä—É—Å—Å–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫—É—é, —Ç–æ –Ω–∞–ø–∏—à–∏ /fix –∏ –≤—ã–±–µ—Ä–∏ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç')
                    eror_2 = 'yes'
                    break
                else:
                    pair_after = pair_raskladok[symbol_num_2]
                    ispr_str += pair_after.second
    else:
        global opat_tonkosti
        opat_tonkosti = 1
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —Å –∫–∞–∫–æ–π —Ä–∞—Å–∫–∞–ª–¥–∫–∏ –Ω–∞ –∫–∞–∫—É—é –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç.',
                         reply_markup=start_markup())
    if opat_tonkosti != 1:
        if eror_1 == 'no' and eror_2 == 'no':
            ispr_soob = '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ(–Ω–∞–∂–º–∏ –Ω–∞ –Ω–µ–≥–æ, —á—Ç–æ–±—ã –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å):\n\n`' + str(ispr_str) + '`\n\n–ß—Ç–æ–±—ã –∏—Å–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –µ–≥–æ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –Ω–∞–ø–∏—à–∏ /fix.'
            bot.send_message(message.chat.id, ispr_soob, parse_mode="MARKDOWN")
            ispr_str = ''
            bot.delete_message(message.chat.id, message.message_id - 1)
            bot.delete_message(message.chat.id, message.message_id - 2)

bot.polling(none_stop=True)